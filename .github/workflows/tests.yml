name: tests

on: [push, pull_request]

jobs:
  # format:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install clang-format-12
  #         sudo ln -f /usr/bin/clang-format-12 /usr/bin/clang-format

  #     - name: Format
  #       run: |
  #         clang-format --version
  #         find src -name '*.cpp'|xargs clang-format --dry-run --Werror --style=file
  #         find src -name '*.h'|xargs clang-format --dry-run --Werror --style=file

  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Clean up
        continue-on-error: true
        run: |
          echo ">>>>"
          apt list --installed | grep llvm 
          sudo apt remove -y llvm-12-dev llvm-13-dev llvm-14-dev
          sudo apt autoremove -y
          echo "<<<<"
          sudo rm -rf /usr/lib/llvm-*
          ls /usr/lib/ | grep llvm
          ls /usr/lib/ | grep clang
          sudo rm -rf /usr/lib/clang*
          echo "<<<<"

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12 clang-tidy-15 llvm-15-dev libclang-15-dev clang-15 zlib1g-dev
          sudo ln -f /usr/bin/clang-tidy-15 /usr/bin/clang-tidy
          sudo ln -f /usr/bin/llvm-symbolizer-15 /usr/bin/llvm-symbolizer
          sudo ln -f /usr/bin/gcov-12 /usr/bin/gcov
          pip install gcovr
          mkdir -p build

      - name: Configure
        run: |
          git submodule update --init
          cd build
          GCOV=gcov-12 CC=gcc-12 CXX=g++-12 cmake \
              -DCMAKE_BUILD_TYPE=Debug            \
              -DBUILD_TESTING=ON                  \
              ..

      - name: Compile
        run: |
          cd build
          make -j $(nproc)

      - name: Git Clone
        if: always() && (github.ref == 'refs/heads/master')
        run: |
          git clone --single-branch --branch gh-pages https://${{ secrets.GH_TOKEN }}@github.com/Delaunay/lython.git build/coverage/
          git config --global user.email "Coverage"
          git config --global user.name "Coverage Bot"

      - name: Test
        run: |
          cd build
          make coverage
          cd coverage
          python ../../scripts/parse_coverage.py --report coverage.xml --csv coverage.csv --template template/badge.svg --target badge.svg

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: always() && (github.ref == 'refs/heads/master')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/coverage
